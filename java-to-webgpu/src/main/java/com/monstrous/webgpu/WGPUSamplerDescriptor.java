package com.monstrous.webgpu;

import com.monstrous.utils.JavaWebGPU;
import com.monstrous.utils.CStrPointer;
import com.monstrous.utils.WgpuJavaStruct;
import com.monstrous.utils.RustCString;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;
import org.jetbrains.annotations.Nullable;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUSamplerDescriptor extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final @Nullable @CStrPointer Struct.Pointer label = new Struct.Pointer();
    private final Struct.Enum<WGPUAddressMode> addressModeU = new Struct.Enum<>(WGPUAddressMode.class);
    private final Struct.Enum<WGPUAddressMode> addressModeV = new Struct.Enum<>(WGPUAddressMode.class);
    private final Struct.Enum<WGPUAddressMode> addressModeW = new Struct.Enum<>(WGPUAddressMode.class);
    private final Struct.Enum<WGPUFilterMode> magFilter = new Struct.Enum<>(WGPUFilterMode.class);
    private final Struct.Enum<WGPUFilterMode> minFilter = new Struct.Enum<>(WGPUFilterMode.class);
    private final Struct.Enum<WGPUMipmapFilterMode> mipmapFilter = new Struct.Enum<>(WGPUMipmapFilterMode.class);
    private final Struct.Float lodMinClamp = new Struct.Float();
    private final Struct.Float lodMaxClamp = new Struct.Float();
    private final Struct.Enum<WGPUCompareFunction> compare = new Struct.Enum<>(WGPUCompareFunction.class);
    private final Struct.Unsigned16 maxAnisotropy = new Struct.Unsigned16();

    private WGPUSamplerDescriptor(){}

    @Deprecated
    public WGPUSamplerDescriptor(Runtime runtime){
        super(runtime);
    }

	/**
	* Creates this struct on the java heap.
	* In general, this should <b>not</b> be used because these structs
	* cannot be directly passed into native code. 
	*/
    public static WGPUSamplerDescriptor createHeap(){
        return new WGPUSamplerDescriptor();
    }

	/**
	* Creates this struct in direct memory.
	* This is how most structs should be created (unless, they
	* are members of a nothing struct)
	* 
	* @see WgpuJavaStruct#useDirectMemory
	*/
    public static WGPUSamplerDescriptor createDirect(){
        WGPUSamplerDescriptor struct = new WGPUSamplerDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public WGPUSamplerDescriptor setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(JavaWebGPU.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
        return this;
    }

    public java.lang.String getLabel(){
        return RustCString.fromPointer(label.get());
    }

    public WGPUSamplerDescriptor setLabel(java.lang.String str){
        this.label.set(RustCString.toPointer(str)); return this;
    }

    public WGPUAddressMode getAddressModeU(){
        return addressModeU.get();
    }

    public WGPUSamplerDescriptor setAddressModeU(WGPUAddressMode val){
        this.addressModeU.set(val); return this;
    }

    public WGPUAddressMode getAddressModeV(){
        return addressModeV.get();
    }

    public WGPUSamplerDescriptor setAddressModeV(WGPUAddressMode val){
        this.addressModeV.set(val); return this;
    }

    public WGPUAddressMode getAddressModeW(){
        return addressModeW.get();
    }

    public WGPUSamplerDescriptor setAddressModeW(WGPUAddressMode val){
        this.addressModeW.set(val); return this;
    }

    public WGPUFilterMode getMagFilter(){
        return magFilter.get();
    }

    public WGPUSamplerDescriptor setMagFilter(WGPUFilterMode val){
        this.magFilter.set(val); return this;
    }

    public WGPUFilterMode getMinFilter(){
        return minFilter.get();
    }

    public WGPUSamplerDescriptor setMinFilter(WGPUFilterMode val){
        this.minFilter.set(val); return this;
    }

    public WGPUMipmapFilterMode getMipmapFilter(){
        return mipmapFilter.get();
    }

    public WGPUSamplerDescriptor setMipmapFilter(WGPUMipmapFilterMode val){
        this.mipmapFilter.set(val); return this;
    }

    public float getLodMinClamp(){
        return lodMinClamp.get();
    }

    public WGPUSamplerDescriptor setLodMinClamp(float val){
        this.lodMinClamp.set(val); return this;
    }

    public float getLodMaxClamp(){
        return lodMaxClamp.get();
    }

    public WGPUSamplerDescriptor setLodMaxClamp(float val){
        this.lodMaxClamp.set(val); return this;
    }

    public WGPUCompareFunction getCompare(){
        return compare.get();
    }

    public WGPUSamplerDescriptor setCompare(WGPUCompareFunction val){
        this.compare.set(val); return this;
    }

    public int getMaxAnisotropy(){
        return maxAnisotropy.get();
    }

    public WGPUSamplerDescriptor setMaxAnisotropy(int val){
        this.maxAnisotropy.set(val); return this;
    }

}